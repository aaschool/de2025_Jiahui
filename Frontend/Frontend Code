import React, { useState, useEffect } from "react";
import { View, Text, TextInput, Button, TouchableOpacity, StyleSheet } from "react-native";
import { NativeModules } from "react-native";

const { SeatBookingModule } = NativeModules; // Connects Java Backend

export default function App() {
  const [user, setUser] = useState({ email: "", password: "" });
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [seats, setSeats] = useState([]);

  // Fetch seat availability from Java Backend
  useEffect(() => {
    if (isLoggedIn) {
      fetchSeats();
    }
  }, [isLoggedIn]);

  const fetchSeats = async () => {
    try {
      const seatData = await SeatBookingModule.getSeatData(); // Call Java function
      setSeats(JSON.parse(seatData));
    } catch (error) {
      console.error("Error fetching seats:", error);
    }
  };

  const handleLogin = () => {
    if (user.email && user.password) {
      setIsLoggedIn(true);
    } else {
      alert("Please enter valid credentials");
    }
  };

  const bookSeat = async (seatId) => {
    try {
      await SeatBookingModule.bookSeat(seatId);
      fetchSeats(); // Refresh seats
    } catch (error) {
      console.error("Error booking seat:", error);
    }
  };

  return (
    <View style={styles.container}>
      {!isLoggedIn ? (
        <View>
          <Text style={styles.title}>AA Library Login</Text>
          <TextInput
            style={styles.input}
            placeholder="AA Account"
            value={user.email}
            onChangeText={(text) => setUser({ ...user, email: text })}
          />
          <TextInput
            style={styles.input}
            placeholder="Password"
            secureTextEntry
            value={user.password}
            onChangeText={(text) => setUser({ ...user, password: text })}
          />
          <Button title="Login" onPress={handleLogin} />
        </View>
      ) : (
        <View>
          <Text style={styles.title}>Library Seat Booking</Text>
          <View style={styles.seatGrid}>
            {seats.map((seat, index) => (
              <TouchableOpacity
                key={index}
                style={[styles.seat, { backgroundColor: seat.available ? "green" : "red" }]}
                onPress={() => bookSeat(seat.id)}
                disabled={!seat.available}
              >
                <Text style={styles.seatText}>{seat.available ? "Available" : "Booked"}</Text>
              </TouchableOpacity>
            ))}
          </View>
          <Button title="Logout" onPress={() => setIsLoggedIn(false)} />
        </View>
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, justifyContent: "center", alignItems: "center", padding: 20 },
  title: { fontSize: 20, fontWeight: "bold", marginBottom: 20 },
  input: { width: 200, padding: 10, borderWidth: 1, borderColor: "#ccc", marginBottom: 10 },
  seatGrid: { flexDirection: "row", flexWrap: "wrap", justifyContent: "center" },
  seat: { width: 60, height: 60, margin: 5, justifyContent: "center", alignItems: "center", borderRadius: 10 },
  seatText: { color: "white", fontWeight: "bold" },
});

